name: Merge and PR into 2021.1
run-name: 2020.3 -> 2021.1 (createPR)
on:
  pull_request_target:
    types:
      - closed
    branches:
      - 'mps/2020.3'
jobs:
  merge-and-PR-into-2021-1:
    # only trigger if it was actually merged
    if: github.event.pull_request.merged == true
    
    runs-on: ubuntu-latest
    steps:

      # checkout the target branch
      - name: Checkout mps/2021.1
        uses: actions/checkout@v3
        with:
          ref: 'mps/2021.1'
          fetch-depth: 0
            
      # actually merge from the previous branch
      - name: Perform merge from 2020.3 to 2021.1
        run: |
          # prepare content for the PR in the next step
          PR_CONTENT="${{ github.event.pull_request.body }}"
          PR_CONTENT="$(echo $PR_CONTENT | sed 's/^/>/g')"
          echo "PR_CONTENT=$PR_CONTENT" >> $GITHUB_ENV
          
          # setup to allow to merge and commit
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          #  TMP DEL ME strip title of previous version suffix
          NEW_TITLE="${{ github.event.pull_request.title }}"
          #NEW_TITLE="${NEW_TITLE// (2020.3 -> 2021.1)}"
          echo "NEW_TITLE=$NEW_TITLE" >> $GITHUB_ENV
          
          
          # actual merge operation
          git merge --no-ff --message "Merge 2020.3 -> 2021.1" origin/mps/2020.3 --
#          git merge --no-commit --no-ff origin/mps/2020.3 --
#          git commit -m "Automatic merge 2020.3 -> 2021.1"

      # create a PR based on the merge
      - name: Create PR for MPS 2021.1
        uses: peter-evans/create-pull-request@v5
        with:
          branch: 'merge/2021.1'
          commit-message: Merge mps/2020.3 into mps/2021.1
          title: ${{ github.event.pull_request.title }} (2020.3 -> 2021.1)
          body: |
            This is an automatic PR which merges changes from `mps/2020.3` to `mps/2021.1`.
            
            [Link to original PR for `mps/2020.3`](${{ github.event.pull_request._links.html.href }})

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"